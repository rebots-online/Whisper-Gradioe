FROM python:3.10-slim AS builder

# Install system dependencies
RUN apt-get update && \
    apt-get install -y curl git ffmpeg && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* && \
    mkdir -p /Whisper-WebUI

WORKDIR /Whisper-WebUI

# Copy requirements first for better caching
COPY requirements.txt .

# Create and activate virtual environment, install dependencies
RUN python -m venv venv && \
    . venv/bin/activate && \
    pip install --no-cache-dir -U pip && \
    # Remove CUDA-specific dependencies and use CPU versions
    sed -i 's/--extra-index-url.*$//' requirements.txt && \
    pip install --no-cache-dir -r requirements.txt

# Second stage for runtime
FROM python:3.10-slim AS runtime

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y ffmpeg curl && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

WORKDIR /Whisper-WebUI

# Copy application code and virtual environment
COPY --from=builder /Whisper-WebUI/venv /Whisper-WebUI/venv
COPY . .

# Create directories for volumes
RUN mkdir -p /Whisper-WebUI/models /Whisper-WebUI/outputs

# Set up environment
ENV PATH="/Whisper-WebUI/venv/bin:$PATH"
ENV PYTHONPATH="/Whisper-WebUI:$PYTHONPATH"

# Create startup script for CPU configuration
COPY docker-entrypoint-cpu.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Define volumes
VOLUME ["/Whisper-WebUI/models", "/Whisper-WebUI/outputs"]

# Set entrypoint
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["app"]
